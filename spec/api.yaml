openapi: 3.0.0
info:
  version: '0.0.1'
  title: 'Hanko 3.0'
  license:
    name: AGPL-3.0-or-later
servers:
  - url: 'localhost:3000'
paths:
  /register:
    post:
      summary: 'Register an account/a user?'
      operationId: register
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'Details about a the registered account/user'
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/CookieSession'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /passlink/{id}:
    get:
      summary: 'Get Passlink'
      operationId: passlinkGet
      tags:
        - authentication
      security:
        - CookieAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/UUID4'
      responses:
        '200':
          description: 'Passlink'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passlink'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /passlink/login/initialize:
    post:
      summary: 'Initialize Passlink login'
      operationId: passlinkInit
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/UUID4'
      responses:
        '200':
          description: 'Passlink'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passlink'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /passlink/login/finalize:
    post:
      summary: 'Finalize Passlink login'
      operationId: passlinkFinal
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passlink_id:
                  $ref: '#/components/schemas/UUID4'
                secret:
                  type: string
      responses:
        '200':
          description: 'Details about a used Passlink'
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/CookieSession'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Passlink'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webauthn/login/initialize:
    post:
      summary: 'Initialize WebAuthn login'
      operationId: webauthnLoginInit
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/UUID4'
      responses:
        '200':
          description: 'Challenge plus user ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  challenge:
                    type: object
                  user_id:
                    $ref: '#/components/schemas/UUID4'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webauthn/login/finalize:
    post:
      summary: 'Finalize WebAuthn login'
      operationId: webauthnLoginFinal
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              description: 'Challenge response'
              type: object
      responses:
        '204':
          description: 'Successful login'
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/CookieSession'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webauthn/registration/initialize:
    post:
      summary: 'Initialize WebAuthn registration'
      operationId: webauthnRegInit
      tags:
        - authentication
      security:
        - CookieAuth: []
      responses:
        '200':
          description: 'Challenge'
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /webauthn/registration/finalize:
    post:
      summary: 'Finalize WebAuthn registration'
      operationId: webauthnRegFinal
      tags:
        - authentication
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              description: 'Challenge response'
              type: object
      responses:
        '200':
          description: 'Credential ID plus User ID'
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_id:
                    type: string
                  user_id:
                    type: integer
                    format: int64
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /.well-known/jwks.json:
    get:
      summary: 'Get public key'
      operationId: getPublicKey
      tags:
        - .well-known
      responses:
        '200':
          description: 'Public Key'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONWebKeySet'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    post:
      summary: 'Create a user'
      operationId: createUser
      security:
        - BearerTokenAuth: []
        - CookieAuth: []
      tags:
        - management
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: 'Details about a the registered account/user'
          headers:
            Set-Cookie:
              schema:
                $ref: '#/components/schemas/CookieSession'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: 'Get a list of users'
      operationId: listUsers
      security:
        - BearerTokenAuth: []
        - CookieAuth: []
      tags:
        - management
      responses:
        '200':
          description: 'Details about a user by ID'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: 'Get a user by ID'
      operationId: listUser
      security:
        - BearerTokenAuth: []
        - CookieAuth: []
      tags:
        - management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/UUID4'
      responses:
        '200':
          description: 'Details about a user by ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: 'Update a user by ID'
      operationId: updateUser
      security:
        - BearerTokenAuth: []
        - CookieAuth: []
      tags:
        - management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/UUID4'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                status:
                  type: string
                  enum: [active, inactive]
      responses:
        '200':
          description: 'Updated user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 'Delete a user by ID'
      operationId: deleteUser
      security:
        - BearerTokenAuth: []
        - CookieAuth: []
      tags:
        - management
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/UUID4'
      responses:
        '204':
          description: 'Deleted'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    CookieSession:
      type: string
      example: HANKOSESSION=abcde12345; Path=/; HttpOnly
    JSONWebKey:
      type: object
      externalDocs:
        description: RFC7517 - JSON Web Key (JWK)
        url: https://datatracker.ietf.org/doc/html/rfc7517
      required:
        - use
        - kty
        - kid
        - alg
      properties:
        alg:
          type: string
          example: RS256
        crv:
          type: string
          example: P-256
        d:
          type: string
          example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE
        dp:
          type: string
          example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0
        dq:
          type: string
          example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk
        e:
          type: string
          example: AQAB
        k:
          type: string
          example: GawgguFyGrWKav7AX4VKUg
        kid:
          type: string
          example: 1603dfe0af8f4596
        kty:
          type: string
          example: RSA
        'n':
          type: string
          example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0
        p:
          type: string
          example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ
        q:
          type: string
          example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ
        qi:
          type: string
          example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU
        use:
          type: string
          example: sig
        x:
          type: string
          example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU
        x5c:
          type: array
          items:
            type: string
        'y':
          type: string
          example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0
    JSONWebKeySet:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JSONWebKey'
    Passlink:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID4'
        ttl:
          type: integer
        status:
          type: string
          enum: [PENDING, FINISHED, EXPIRED]
        created_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID4'
        email:
          type: string
          format: email
        status:
          type: string
          enum: [active, inactive]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UUID4:
      type: string
      format: uuid4
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    BearerTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token obtained through authentication with the Authentication API
    CookieAuth:
      type: apiKey
      in: cookie
      name: HANKOSESSION
